<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <artifactId>jooq-mysql-example</artifactId>
    <groupId>org.shiloh</groupId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>

  <artifactId>jooq-in-spring-boot</artifactId>

  <properties>
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>

    <spring-boot.version>2.2.4.RELEASE</spring-boot.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring-boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-jooq</artifactId>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
      <!-- JOOQ 代码生成器插件配置-->
      <plugin>
        <groupId>org.jooq</groupId>
        <artifactId>jooq-codegen-maven</artifactId>
        <version>${jooq.version}</version>
        <configuration>
          <jdbc>
            <driver>com.mysql.cj.jdbc.Driver</driver>
            <url>jdbc:mysql://127.0.0.1:13306/learn_jooq?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8</url>
            <user>root</user>
            <password>123456</password>
          </jdbc>
          <generator>
            <!--            自定义 jOOQ 生成的类文件的命名策略-->
            <strategy>
              <name>org.shiloh.config.CustomGeneratorStrategy</name>
            </strategy>
            <generate>
              <!--              生成和表一一对应的 Pojo-->
              <pojos>true</pojos>
              <!--
              生成和表一一对应的接口，接口定义了getter/setter方法，并且定义了接口类型为参数的 from/into 方法。
              通过此配置，相同表的POJO和Record之间互相转换的性能会有所提升。
              可以看到生成的 into 方法实际调用的是来源对象的 from 方法，这个 from 方法和父级的 from(Object any) 不同的是：
              此方法是通过主动调用 set 方法进行值设置。from(Object obj) 这类通用型的转换方法，都是通过反射进行值设置。
              一个是直接方法调用，一个是反射调用，显然通过接口生成的 from/into 方法实现，有着更高的性能优势。
              -->
              <interfaces>true</interfaces>
              <!--
              生成与表一一对应的 DAO 层，DAO 接口定义了一些常用的CURD操作，其中有一些操作是通过主键来完成的。
              注意如果没有主键的表，在代码生成时，是不会生成DAO的。
              -->
              <daos>true</daos>
              <!--
              自动为 DAO 类添加 Spring 的 @Repository 注解将 DAO 声明为 Bean，
              并且会自动在带参构造器XxxDao(Configuration configuration) 上添加 @Autowired 注解
              -->
              <springAnnotations>true</springAnnotations>
            </generate>
            <database>
              <inputSchema>learn_jooq</inputSchema>
              <!--              要生成哪些表对应的 Java 代码-->
              <!--              <includes>*.*</includes>-->
            </database>
            <!--            配置 JOOQ 生成的代码存放的位置-->
            <target>
              <packageName>org.shiloh.jooq.codegen</packageName>
              <directory>./src/main/java</directory>
            </target>
          </generator>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>